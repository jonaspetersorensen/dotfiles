##################################################################
### START .bashrc_dotfiles
##################################################################


# In order to keep .bashrc as "clean" as possible I have separated out my own custom settings into this file.
# Intended usage is to call this file at the end of .bashrc


##################################################################
### PATH



##################################################################
### TMUX
# Do not restart tmux if an update is in progress.
# The update script will use an empty file "TMUX_UPDATE_IN_PROGRESS" as flag so that any session can read it
if [ ! -f "$HOME/TMUX_UPDATE_IN_PROGRESS" ]; then	

	if [ -z "$TMUX" -a "$TERM_PROGRAM" != "vscode" ] ; then

		TERMINAL_EMULATOR="$(basename $(tty))"
		TERMINAL_EMULATOR=${TERMINAL_EMULATOR^^} # Uppercase all letters

		TERMINAL_PROCESS="$(ps -o 'cmd=' -p $(ps -o 'ppid=' -p $$))"

		if [ -x "$TERMINAL_PROCESS" ] ; then
			TERMINAL_EMULATOR=$(basename "$TERMINAL_PROCESS")
			TERMINAL_EMULATOR=${TERMINAL_EMULATOR^} # Uppercase first letter
		elif [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
			TERMINAL_EMULATOR="SSH"
		fi

		for i in $(seq -w 1 100) ; do
			if [ "$i" -eq 001 ] ; then
				SESSION_NAME="$TERMINAL_EMULATOR"
			else
				SESSION_NAME="$TERMINAL_EMULATOR-$i"
			fi

			if (exec tmux -u new -s "$SESSION_NAME") ; then
				break
			fi
		done
	fi

fi



##################################################################
### OH MY POSH
eval "$(oh-my-posh --init --shell bash --config $HOME/.poshthemes/rudolfs-dark.omp.json)"
##################################################################


##################################################################
### RUST
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"



##################################################################
### ALIAS

# mpy-cross for CirquitPython
# if [ -f "$HOME/.local/bin/mpy-cross-linux-amd64-8.2.0.static" ] ; then
# 	alias mpy-cross="$HOME/.local/bin/mpy-cross-linux-amd64-8.2.0.static"
# fi




##################################################################
### KEYCHAIN (manager for ssh-agent)
function addKeyToKeychain()
{
	# Input $1 = Filepath pattern
	for key in $1
	do
		# Test if glob is not empty
		if stat -t $key >/dev/null 2>&1; then
			/usr/bin/keychain --nogui --quiet $key
			#echo "Key added to keychain: $key"
		fi
	done
}
addKeyToKeychain "$HOME/.ssh/id_*"
addKeyToKeychain "$HOME/.ssh/*_id_rsa"
addKeyToKeychain "$HOME/.ssh/*.pem"
source "$HOME/.keychain/$(hostname)-sh"


##################################################################
### END .bashrc_dotfiles
##################################################################


